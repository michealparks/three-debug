import{w as y}from"./index.ooFNI0ib.js";import{c as h}from"./index.G0ko9CtU.js";const d=r=>{const f=y(void 0),o=y(void 0);return r.then(a=>{f.set(a)}).catch(a=>{console.error("Error in asyncWritable:",a.message),o.set(a)}),Object.assign(Object.assign(r,f),{error:o,promise:r})};function w(r,f){const{remember:o,clear:a}=h();let l;const b=()=>{const e=new r(...f?.args??[]);return f?.extend?.(e),e};return{load:(e,t)=>{const m=async n=>{if(l||(l=b()),"loadAsync"in l){const c=await l.loadAsync(n,t?.onProgress);return t?.transform?.(c)??c}else return new Promise((c,s)=>{l.load(n,i=>c(t?.transform?.(i)??i),i=>t?.onProgress?.(i),s)})};if(Array.isArray(e)){const n=e.map(s=>o(()=>m(s),[r,s]));return d(Promise.all(n))}else if(typeof e=="string"){const n=o(()=>m(e),[r,e]);return d(n)}else{const n=Object.values(e).map(s=>o(()=>m(s),[r,s]));return d(Promise.all(n).then(s=>Object.fromEntries(Object.entries(e).map(([i],g)=>[i,s[g]]))))}},clear:e=>{Array.isArray(e)?e.forEach(t=>{a([r,t])}):typeof e=="string"?a([r,e]):Object.entries(e).forEach(([t,m])=>{a([r,t,m])})},loader:l}}export{w as u};
