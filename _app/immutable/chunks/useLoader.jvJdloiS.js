import{w as y}from"./index.LlmmEgPd.js";import{ae as g}from"./index.5bYSUwMT.js";const d=r=>{const i=y(void 0),o=y(void 0);return r.then(t=>{i.set(t)}).catch(t=>{console.error("Error in asyncWritable:",t.message),o.set(t)}),Object.assign(Object.assign(r,i),{error:o,promise:r})},u=(r,i={})=>{const{remember:o,clear:t}=g(),m=new r;return i.extend?.(m),{load:(e,a)=>{const f=async n=>{if("loadAsync"in m){const c=await m.loadAsync(n,a?.onProgress);return a?.transform?.(c)??c}else return new Promise((c,s)=>{m.load(n,l=>c(a?.transform?.(l)??l),l=>a?.onProgress?.(l),s)})};if(Array.isArray(e)){const n=e.map(s=>o(()=>f(s),[r,s]));return d(Promise.all(n))}else if(typeof e=="string"){const n=o(()=>f(e),[r,e]);return d(n)}else{const n=Object.values(e).map(s=>o(()=>f(s),[r,s]));return d(Promise.all(n).then(s=>Object.fromEntries(Object.entries(e).map(([l],b)=>[l,s[b]]))))}},clear:e=>{Array.isArray(e)?e.forEach(a=>{t([r,a])}):typeof e=="string"?t([r,e]):Object.entries(e).forEach(([a,f])=>{t([r,a,f])})},loader:m}};export{u};
